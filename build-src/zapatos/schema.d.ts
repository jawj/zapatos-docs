/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type appleEnvironment = 'PROD' | 'Sandbox';
  export namespace every {
    export type appleEnvironment = ['PROD', 'Sandbox'];
  }

  /* --- tables --- */

  /**
   * **appleTransactions**
   * - Table in database
   */
  export namespace appleTransactions {
    export type Table = 'appleTransactions';
    export interface Selectable {
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      accountId: number;
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
      environment: appleEnvironment;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
      latestReceiptData: string | null;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      originalTransactionId: string;
    }
    export interface JSONSelectable {
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      accountId: number;
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
      environment: appleEnvironment;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
      latestReceiptData: string | null;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      originalTransactionId: string;
    }
    export interface Whereable {
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      accountId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
      environment?: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.ParentColumn>;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
      latestReceiptData?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      originalTransactionId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      accountId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
      environment: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
      latestReceiptData?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      originalTransactionId: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      accountId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
      environment?: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.SQLFragment<any, appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment>;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
      latestReceiptData?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      originalTransactionId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'appleTransactionsPrimaryKey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **arrays**
   * - Table in database
   */
  export namespace arrays {
    export type Table = 'arrays';
    export interface Selectable {
      /**
      * **arrays.jsonValue**
      * - `jsonb` in database
      * - Nullable, no default
      */
      jsonValue: db.JSONValue | null;
      /**
      * **arrays.textArray**
      * - `_text` in database
      * - Nullable, no default
      */
      textArray: string[] | null;
    }
    export interface JSONSelectable {
      /**
      * **arrays.jsonValue**
      * - `jsonb` in database
      * - Nullable, no default
      */
      jsonValue: db.JSONValue | null;
      /**
      * **arrays.textArray**
      * - `_text` in database
      * - Nullable, no default
      */
      textArray: string[] | null;
    }
    export interface Whereable {
      /**
      * **arrays.jsonValue**
      * - `jsonb` in database
      * - Nullable, no default
      */
      jsonValue?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **arrays.textArray**
      * - `_text` in database
      * - Nullable, no default
      */
      textArray?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **arrays.jsonValue**
      * - `jsonb` in database
      * - Nullable, no default
      */
      jsonValue?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **arrays.textArray**
      * - `_text` in database
      * - Nullable, no default
      */
      textArray?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **arrays.jsonValue**
      * - `jsonb` in database
      * - Nullable, no default
      */
      jsonValue?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **arrays.textArray**
      * - `_text` in database
      * - Nullable, no default
      */
      textArray?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **authors**
   * - Table in database
   */
  export namespace authors {
    export type Table = 'authors';
    export interface Selectable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
      isLiving: boolean | null;
      /**
      * **authors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
      isLiving: boolean | null;
      /**
      * **authors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
      isLiving?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
      isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **authors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
      isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **authors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'authors_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **bankAccounts**
   * - Table in database
   */
  export namespace bankAccounts {
    export type Table = 'bankAccounts';
    export interface Selectable {
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      balance: number;
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
      id: number;
    }
    export interface JSONSelectable {
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      balance: number;
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
      id: number;
    }
    export interface Whereable {
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'bankAccounts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **bigints**
   * - Table in database
   */
  export namespace bigints {
    export type Table = 'bigints';
    export interface Selectable {
      /**
      * **bigints.bigintValue**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      bigintValue: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **bigints.bigintValue**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      bigintValue: (number | db.Int8String);
    }
    export interface Whereable {
      /**
      * **bigints.bigintValue**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      bigintValue?: (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **bigints.bigintValue**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      bigintValue: (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **bigints.bigintValue**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      bigintValue?: (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **books**
   * - Table in database
   */
  export namespace books {
    export type Table = 'books';
    export interface Selectable {
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId: number;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
      id: number;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
      title: string | null;
    }
    export interface JSONSelectable {
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId: number;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
      id: number;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
      title: string | null;
    }
    export interface Whereable {
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
      title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
      title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'books_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **doctors**
   * - Table in database
   */
  export namespace doctors {
    export type Table = 'doctors';
    export interface Selectable {
      /**
      * **doctors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('doctors_id_seq'::regclass)`
      */
      id: number;
      /**
      * **doctors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **doctors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('doctors_id_seq'::regclass)`
      */
      id: number;
      /**
      * **doctors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **doctors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('doctors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **doctors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **doctors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('doctors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **doctors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **doctors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('doctors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **doctors.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'doctors_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **emailAuthentication**
   * - Table in database
   */
  export namespace emailAuthentication {
    export type Table = 'emailAuthentication';
    export interface Selectable {
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      consecutiveFailedLogins: number;
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastFailedLogin: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      consecutiveFailedLogins: number;
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastFailedLogin: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      consecutiveFailedLogins?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      consecutiveFailedLogins?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      consecutiveFailedLogins?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'emailAuthentication_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **employees**
   * - Table in database
   */
  export namespace employees {
    export type Table = 'employees';
    export interface Selectable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
      id: number;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
      managerId: number | null;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
      id: number;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
      managerId: number | null;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
      managerId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
      managerId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
      managerId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'employees_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **nameCounts**
   * - Table in database
   */
  export namespace nameCounts {
    export type Table = 'nameCounts';
    export interface Selectable {
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      count: number;
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      count: number;
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      count: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      count?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'nameCounts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **numerics**
   * - Table in database
   */
  export namespace numerics {
    export type Table = 'numerics';
    export interface Selectable {
      /**
      * **numerics.numericValue**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      numericValue: db.NumericString;
    }
    export interface JSONSelectable {
      /**
      * **numerics.numericValue**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      numericValue: (number | db.NumericString);
    }
    export interface Whereable {
      /**
      * **numerics.numericValue**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      numericValue?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **numerics.numericValue**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      numericValue: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **numerics.numericValue**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      numericValue?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **photos**
   * - Table in database
   */
  export namespace photos {
    export type Table = 'photos';
    export interface Selectable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      photoId: number;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url: string;
    }
    export interface JSONSelectable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      photoId: number;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url: string;
    }
    export interface Whereable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      photoId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      photoId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'photos_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **shifts**
   * - Table in database
   */
  export namespace shifts {
    export type Table = 'shifts';
    export interface Selectable {
      /**
      * **shifts.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day: Date;
      /**
      * **shifts.doctorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      doctorId: number;
    }
    export interface JSONSelectable {
      /**
      * **shifts.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day: db.DateString;
      /**
      * **shifts.doctorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      doctorId: number;
    }
    export interface Whereable {
      /**
      * **shifts.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shifts.doctorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      doctorId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **shifts.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **shifts.doctorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      doctorId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **shifts.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **shifts.doctorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      doctorId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'shifts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stores**
   * - Table in database
   */
  export namespace stores {
    export type Table = 'stores';
    export interface Selectable {
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
      geom: c.PgGeometry;
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
      id: number;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
      geom: c.PgGeometry;
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
      id: number;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
      geom?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
      geom: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment;
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
      geom?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment>;
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'stores_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **subjectPhotos**
   * - Table in database
   */
  export namespace subjectPhotos {
    export type Table = 'subjectPhotos';
    export interface Selectable {
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      photoId: number;
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      subjectId: number;
    }
    export interface JSONSelectable {
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      photoId: number;
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      subjectId: number;
    }
    export interface Whereable {
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      photoId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      subjectId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'userphotosunique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **subjects**
   * - Table in database
   */
  export namespace subjects {
    export type Table = 'subjects';
    export interface Selectable {
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      subjectId: number;
    }
    export interface JSONSelectable {
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      subjectId: number;
    }
    export interface Whereable {
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      subjectId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      subjectId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'subjects_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tags**
   * - Table in database
   */
  export namespace tags {
    export type Table = 'tags';
    export interface Selectable {
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bookId: number;
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tag: string;
    }
    export interface JSONSelectable {
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bookId: number;
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tag: string;
    }
    export interface Whereable {
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bookId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tag?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bookId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tag: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bookId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tag?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tagsUniqueIdx';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **usedVoucherCodes**
   * - Table in database
   */
  export namespace usedVoucherCodes {
    export type Table = 'usedVoucherCodes';
    export interface Selectable {
      /**
      * **usedVoucherCodes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string;
      /**
      * **usedVoucherCodes.redeemedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      redeemedAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **usedVoucherCodes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string;
      /**
      * **usedVoucherCodes.redeemedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      redeemedAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **usedVoucherCodes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **usedVoucherCodes.redeemedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      redeemedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **usedVoucherCodes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **usedVoucherCodes.redeemedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      redeemedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **usedVoucherCodes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **usedVoucherCodes.redeemedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      redeemedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'usedVoucherCodes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **users**
   * - Table in database
   */
  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.friendlyName**
      * - `text` in database
      * - Nullable, no default
      */
      friendlyName: string | null;
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **users.ipOctet**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      ipOctet: number;
    }
    export interface JSONSelectable {
      /**
      * **users.friendlyName**
      * - `text` in database
      * - Nullable, no default
      */
      friendlyName: string | null;
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **users.ipOctet**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      ipOctet: number;
    }
    export interface Whereable {
      /**
      * **users.friendlyName**
      * - `text` in database
      * - Nullable, no default
      */
      friendlyName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.ipOctet**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      ipOctet?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.friendlyName**
      * - `text` in database
      * - Nullable, no default
      */
      friendlyName?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **users.ipOctet**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      ipOctet?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.friendlyName**
      * - `text` in database
      * - Nullable, no default
      */
      friendlyName?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.ipOctet**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      ipOctet?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_ipOctet_key' | 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = appleTransactions.Table | arrays.Table | authors.Table | bankAccounts.Table | bigints.Table | books.Table | doctors.Table | emailAuthentication.Table | employees.Table | nameCounts.Table | numerics.Table | photos.Table | shifts.Table | stores.Table | subjectPhotos.Table | subjects.Table | tags.Table | usedVoucherCodes.Table | users.Table;
    export type Selectable = appleTransactions.Selectable | arrays.Selectable | authors.Selectable | bankAccounts.Selectable | bigints.Selectable | books.Selectable | doctors.Selectable | emailAuthentication.Selectable | employees.Selectable | nameCounts.Selectable | numerics.Selectable | photos.Selectable | shifts.Selectable | stores.Selectable | subjectPhotos.Selectable | subjects.Selectable | tags.Selectable | usedVoucherCodes.Selectable | users.Selectable;
    export type JSONSelectable = appleTransactions.JSONSelectable | arrays.JSONSelectable | authors.JSONSelectable | bankAccounts.JSONSelectable | bigints.JSONSelectable | books.JSONSelectable | doctors.JSONSelectable | emailAuthentication.JSONSelectable | employees.JSONSelectable | nameCounts.JSONSelectable | numerics.JSONSelectable | photos.JSONSelectable | shifts.JSONSelectable | stores.JSONSelectable | subjectPhotos.JSONSelectable | subjects.JSONSelectable | tags.JSONSelectable | usedVoucherCodes.JSONSelectable | users.JSONSelectable;
    export type Whereable = appleTransactions.Whereable | arrays.Whereable | authors.Whereable | bankAccounts.Whereable | bigints.Whereable | books.Whereable | doctors.Whereable | emailAuthentication.Whereable | employees.Whereable | nameCounts.Whereable | numerics.Whereable | photos.Whereable | shifts.Whereable | stores.Whereable | subjectPhotos.Whereable | subjects.Whereable | tags.Whereable | usedVoucherCodes.Whereable | users.Whereable;
    export type Insertable = appleTransactions.Insertable | arrays.Insertable | authors.Insertable | bankAccounts.Insertable | bigints.Insertable | books.Insertable | doctors.Insertable | emailAuthentication.Insertable | employees.Insertable | nameCounts.Insertable | numerics.Insertable | photos.Insertable | shifts.Insertable | stores.Insertable | subjectPhotos.Insertable | subjects.Insertable | tags.Insertable | usedVoucherCodes.Insertable | users.Insertable;
    export type Updatable = appleTransactions.Updatable | arrays.Updatable | authors.Updatable | bankAccounts.Updatable | bigints.Updatable | books.Updatable | doctors.Updatable | emailAuthentication.Updatable | employees.Updatable | nameCounts.Updatable | numerics.Updatable | photos.Updatable | shifts.Updatable | stores.Updatable | subjectPhotos.Updatable | subjects.Updatable | tags.Updatable | usedVoucherCodes.Updatable | users.Updatable;
    export type UniqueIndex = appleTransactions.UniqueIndex | arrays.UniqueIndex | authors.UniqueIndex | bankAccounts.UniqueIndex | bigints.UniqueIndex | books.UniqueIndex | doctors.UniqueIndex | emailAuthentication.UniqueIndex | employees.UniqueIndex | nameCounts.UniqueIndex | numerics.UniqueIndex | photos.UniqueIndex | shifts.UniqueIndex | stores.UniqueIndex | subjectPhotos.UniqueIndex | subjects.UniqueIndex | tags.UniqueIndex | usedVoucherCodes.UniqueIndex | users.UniqueIndex;
    export type Column = appleTransactions.Column | arrays.Column | authors.Column | bankAccounts.Column | bigints.Column | books.Column | doctors.Column | emailAuthentication.Column | employees.Column | nameCounts.Column | numerics.Column | photos.Column | shifts.Column | stores.Column | subjectPhotos.Column | subjects.Column | tags.Column | usedVoucherCodes.Column | users.Column;
  
    export type AllBaseTables = [appleTransactions.Table, arrays.Table, authors.Table, bankAccounts.Table, bigints.Table, books.Table, doctors.Table, emailAuthentication.Table, employees.Table, nameCounts.Table, numerics.Table, photos.Table, shifts.Table, stores.Table, subjectPhotos.Table, subjects.Table, tags.Table, usedVoucherCodes.Table, users.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [appleTransactions.Table, arrays.Table, authors.Table, bankAccounts.Table, bigints.Table, books.Table, doctors.Table, emailAuthentication.Table, employees.Table, nameCounts.Table, numerics.Table, photos.Table, shifts.Table, stores.Table, subjectPhotos.Table, subjects.Table, tags.Table, usedVoucherCodes.Table, users.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Selectable;
    "arrays": arrays.Selectable;
    "authors": authors.Selectable;
    "bankAccounts": bankAccounts.Selectable;
    "bigints": bigints.Selectable;
    "books": books.Selectable;
    "doctors": doctors.Selectable;
    "emailAuthentication": emailAuthentication.Selectable;
    "employees": employees.Selectable;
    "nameCounts": nameCounts.Selectable;
    "numerics": numerics.Selectable;
    "photos": photos.Selectable;
    "shifts": shifts.Selectable;
    "stores": stores.Selectable;
    "subjectPhotos": subjectPhotos.Selectable;
    "subjects": subjects.Selectable;
    "tags": tags.Selectable;
    "usedVoucherCodes": usedVoucherCodes.Selectable;
    "users": users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.JSONSelectable;
    "arrays": arrays.JSONSelectable;
    "authors": authors.JSONSelectable;
    "bankAccounts": bankAccounts.JSONSelectable;
    "bigints": bigints.JSONSelectable;
    "books": books.JSONSelectable;
    "doctors": doctors.JSONSelectable;
    "emailAuthentication": emailAuthentication.JSONSelectable;
    "employees": employees.JSONSelectable;
    "nameCounts": nameCounts.JSONSelectable;
    "numerics": numerics.JSONSelectable;
    "photos": photos.JSONSelectable;
    "shifts": shifts.JSONSelectable;
    "stores": stores.JSONSelectable;
    "subjectPhotos": subjectPhotos.JSONSelectable;
    "subjects": subjects.JSONSelectable;
    "tags": tags.JSONSelectable;
    "usedVoucherCodes": usedVoucherCodes.JSONSelectable;
    "users": users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Whereable;
    "arrays": arrays.Whereable;
    "authors": authors.Whereable;
    "bankAccounts": bankAccounts.Whereable;
    "bigints": bigints.Whereable;
    "books": books.Whereable;
    "doctors": doctors.Whereable;
    "emailAuthentication": emailAuthentication.Whereable;
    "employees": employees.Whereable;
    "nameCounts": nameCounts.Whereable;
    "numerics": numerics.Whereable;
    "photos": photos.Whereable;
    "shifts": shifts.Whereable;
    "stores": stores.Whereable;
    "subjectPhotos": subjectPhotos.Whereable;
    "subjects": subjects.Whereable;
    "tags": tags.Whereable;
    "usedVoucherCodes": usedVoucherCodes.Whereable;
    "users": users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Insertable;
    "arrays": arrays.Insertable;
    "authors": authors.Insertable;
    "bankAccounts": bankAccounts.Insertable;
    "bigints": bigints.Insertable;
    "books": books.Insertable;
    "doctors": doctors.Insertable;
    "emailAuthentication": emailAuthentication.Insertable;
    "employees": employees.Insertable;
    "nameCounts": nameCounts.Insertable;
    "numerics": numerics.Insertable;
    "photos": photos.Insertable;
    "shifts": shifts.Insertable;
    "stores": stores.Insertable;
    "subjectPhotos": subjectPhotos.Insertable;
    "subjects": subjects.Insertable;
    "tags": tags.Insertable;
    "usedVoucherCodes": usedVoucherCodes.Insertable;
    "users": users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Updatable;
    "arrays": arrays.Updatable;
    "authors": authors.Updatable;
    "bankAccounts": bankAccounts.Updatable;
    "bigints": bigints.Updatable;
    "books": books.Updatable;
    "doctors": doctors.Updatable;
    "emailAuthentication": emailAuthentication.Updatable;
    "employees": employees.Updatable;
    "nameCounts": nameCounts.Updatable;
    "numerics": numerics.Updatable;
    "photos": photos.Updatable;
    "shifts": shifts.Updatable;
    "stores": stores.Updatable;
    "subjectPhotos": subjectPhotos.Updatable;
    "subjects": subjects.Updatable;
    "tags": tags.Updatable;
    "usedVoucherCodes": usedVoucherCodes.Updatable;
    "users": users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "appleTransactions": appleTransactions.UniqueIndex;
    "arrays": arrays.UniqueIndex;
    "authors": authors.UniqueIndex;
    "bankAccounts": bankAccounts.UniqueIndex;
    "bigints": bigints.UniqueIndex;
    "books": books.UniqueIndex;
    "doctors": doctors.UniqueIndex;
    "emailAuthentication": emailAuthentication.UniqueIndex;
    "employees": employees.UniqueIndex;
    "nameCounts": nameCounts.UniqueIndex;
    "numerics": numerics.UniqueIndex;
    "photos": photos.UniqueIndex;
    "shifts": shifts.UniqueIndex;
    "stores": stores.UniqueIndex;
    "subjectPhotos": subjectPhotos.UniqueIndex;
    "subjects": subjects.UniqueIndex;
    "tags": tags.UniqueIndex;
    "usedVoucherCodes": usedVoucherCodes.UniqueIndex;
    "users": users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Column;
    "arrays": arrays.Column;
    "authors": authors.Column;
    "bankAccounts": bankAccounts.Column;
    "bigints": bigints.Column;
    "books": books.Column;
    "doctors": doctors.Column;
    "emailAuthentication": emailAuthentication.Column;
    "employees": employees.Column;
    "nameCounts": nameCounts.Column;
    "numerics": numerics.Column;
    "photos": photos.Column;
    "shifts": shifts.Column;
    "stores": stores.Column;
    "subjectPhotos": subjectPhotos.Column;
    "subjects": subjects.Column;
    "tags": tags.Column;
    "usedVoucherCodes": usedVoucherCodes.Column;
    "users": users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "appleTransactions": appleTransactions.SQL;
    "arrays": arrays.SQL;
    "authors": authors.SQL;
    "bankAccounts": bankAccounts.SQL;
    "bigints": bigints.SQL;
    "books": books.SQL;
    "doctors": doctors.SQL;
    "emailAuthentication": emailAuthentication.SQL;
    "employees": employees.SQL;
    "nameCounts": nameCounts.SQL;
    "numerics": numerics.SQL;
    "photos": photos.SQL;
    "shifts": shifts.SQL;
    "stores": stores.SQL;
    "subjectPhotos": subjectPhotos.SQL;
    "subjects": subjects.SQL;
    "tags": tags.SQL;
    "usedVoucherCodes": usedVoucherCodes.SQL;
    "users": users.SQL;
  }[T];

}
